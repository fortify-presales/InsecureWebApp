#
# An example GitLab CI/CD pipeline configuration file for a Python/Flask application that includes build, test, deploy and:
#   - OpenText Application Security Core (FoD) SAST/DAST/SCA scans ... or
#   - OpenText Application Security (ScanCentral) SAST/DAST scans
#   - OpenText SCA Core (Debricked) ... or
#   - Sonatype Lifecycle (Nexus IQ Server)
#
# This pipeline uses the Fortify fcli tool and GitLab CI/CD Components (https://gitlab.com/Fortify/components)
#
# If using OpenText Application Security Core (FoD) set the following variables in your GitLab project/organisation:
#   - FOD_URL: Fortify on Demand URL (e.g., https://ams.fortify.com)
#   - FOD_API_URL: Fortify API URL (e.g., https://api.ams.fortify.com)
#   - FOD_CLIENT_ID: Fortify on Demand Client ID
#   - FOD_CLIENT_SECRET: Fortify on Demand Client Secret
#   - FOD_APP_NAME_POSTFIX: Optional postfix for the application name
#
# If using OpenText Application Security (ScanCentral) set the following variables in your GitLab project/organisation:
#   - SSC_URL: Software Security Center URL (e.g. https://ssc.customer.fortifyhosted.net/)
#   - SSC_TOKEN: Sofware Security Center CIToken
#   - SC_SAST_TOKEN: ScanCentral SAST Client Authentication Token
#   - SSC_APP_NAME_POSTFIX: Optional postfix for the application name
#   - SCDAST_SETTINGS_ID: Optional ScanCentral DAST Settings Id for DAST scan to run
#
# If using Sonatype Lifecycle (Nexus IQ Server) set the following variables in your GitLab project/organisation:
#   - NEXUS_IQ_URL: Nexus IQ Server URL
#   - NEXUS_IQ_USERNAME: Nexus IQ Username
#   - NEXUS_IQ_PASSWORD: Nexus IQ Password
#
# If using OpenText SCA Core (Debricked) set the following variables in your GitLab project/organisation:
#   - DEBRICKED_TOKEN: Debricked Access Token

spec:
  inputs:
    debug:
      default: false
      type: boolean
    
---

image: python:3.12    # default image to use for the pipeline

stages:
  - build
  - dockerize
  - test
  - deploy
  - scan

workflow:
  rules:
    # Only run the pipeline for merge requests and pushes to branches (not both when a merge request is open)
    - if: $CI_PIPELINE_SOURCE == "merge_request_event"
    - if: $CI_COMMIT_BRANCH && $CI_OPEN_MERGE_REQUESTS
      when: never
    - if: $CI_COMMIT_BRANCH

variables:
  DEFAULT_APP_NAME: "InsecureWebApp"
  DEFAULT_PARENT_RELEASE_NAME: "main"
  DEFAULT_PARENT_APPVERSION_NAME: "main"
  DEFAULT_RELEASE_NAME: "${CI_COMMIT_BRANCH}"
  DEFAULT_APPVERSION_NAME: "${CI_COMMIT_BRANCH}"
  DEFAULT_SONATYPE_IQ_APPLICATION_ID: "insecurewebapp"
  IMAGE_TAG: $CI_REGISTRY_IMAGE:$CI_COMMIT_SHORT_SHA

# use a cache for Python .venv and deps
cache:
  key: ${CI_COMMIT_REF_SLUG}
  paths:
    - .venv/
    - deps/

# include CI/CD components and jobs depending on what we want to run
include:
  # include fcli component to run `fcli` commands
  - component: $CI_SERVER_FQDN/Fortify/components/fcli/linux@main
    inputs:
      stage: scan                # Stage in which to run the fcli commands

  #
  # uncomment one or more includes below depending on what scans you want to run
  #

  # include OpenText Application Security Core (FoD) jobs
  #- component: $CI_SERVER_FQDN/Fortify/components/ast-scan/linux@main
  #  inputs:
  #    job-name: fod-sast-scan # Optional job name used for running the AST scan, defaults to 'fortify-ast-scan'
  #    stage: scan                 # Stage in which to run the AST scan, defaults to 'test'
  #- remote: 'https://gitlab.com/fortify-presales/gitlab-pipelines/raw/main/templates/gitlab-fod.yml'

  # include OpenText ScanCentral jobs
  #- component: $CI_SERVER_FQDN/Fortify/components/ast-scan/linux@main
  #  inputs:
  #    job-name: scancentral-sast-scan # Optional job name used for running the AST scan, defaults to 'fortify-ast-scan'
  #    stage: scan                 # Stage in which to run the AST scan, defaults to 'test'
  #- remote: 'https://gitlab.com/fortify-presales/gitlab-pipelines/raw/main/templates/gitlab-scancentral.yml'

  # include OpenText Software Composition Analysis Core (Debricked) jobs
  #- remote: 'https://gitlab.com/fortify-presales/gitlab-pipelines/raw/main/templates/gitlab-debricked.yml'

  # include Sonatype Nexus IQ jobs
  #- remote: 'https://gitlab.com/fortify-presales/gitlab-pipelines/raw/main/templates/gitlab-sonatype.yml'


# This is a sample job to build the application. You can replace it with your actual build job.
build:
  stage: build
  before_script:
    - python -m venv .venv
    - . .venv/bin/activate
    - pip install -r requirements.txt
    - pip download -r requirements.txt -d deps
  script:
    - echo "Building the application..."

# This is a sample job to test a Python application using pytest. You can replace it with your actual test job.
test:
  stage: test
  before_script:
#    - python -m venv .venv
    - . .venv/bin/activate
#    - pip install -r requirements.txt
  script:
    - pytest --cov --cov-report term --cov-report xml:coverage.xml --junitxml=report.xml --cov-config=.coveragerc
  coverage: '/(?i)total.*? (100(?:\.0+)?\%|[1-9]?\d(?:\.\d+)?\%)$/'
  artifacts:
    when: always
    paths:
      - report.xml
    reports:
      junit: report.xml
      coverage_report:
        coverage_format: cobertura
        path: coverage.xml

# This is a sample job to build the application into a Docker image and push it to the GitLab Container Registry
dockerize:
  stage: dockerize
  image: docker:latest
  dependencies:
    - build
  services:
    - docker:dind
  before_script:
    - echo $CI_JOB_TOKEN | docker login -u gitlab-ci-token --password-stdin $CI_REGISTRY
    - echo $IMAGE_TAG
  script:
    - docker build -t $IMAGE_TAG .
    - docker push $IMAGE_TAG
  rules:
    - if: $CI_COMMIT_BRANCH == "main"

# This is a sample job to deploy the application. You can replace it with your actual deploy job.
deploy:
  stage: deploy
  script:
    - echo "Deploying the application..."
  rules:
  - if: $CI_COMMIT_BRANCH == "main"
