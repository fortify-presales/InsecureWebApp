# Example jobs for working with OpenText Application Security Core (FoD)

env-prepare:
  stage: build
  script: |
    if [[ $CI_MERGE_REQUEST_ID != "" ]]; then
        echo "Running in a merge request pipeline ..."
        echo "FOD_RELEASE=${DEFAULT_APP_NAME}${FOD_APP_NAME_POSTFIX}:merge-to-${CI_MERGE_REQUEST_TARGET_BRANCH_NAME}!MR${CI_MERGE_REQUEST_IID}" >> build.env
        echo "FOD_PARENT_RELEASE=${DEFAULT_APP_NAME}${FOD_APP_NAME_POSTFIX}:${CI_MERGE_REQUEST_SOURCE_BRANCH_NAME}" >> build.env
    else
        echo "Running in a branch pipeline ..."
        echo "FOD_RELEASE=${DEFAULT_APP_NAME}${FOD_APP_NAME_POSTFIX}:${CI_COMMIT_BRANCH}" >> build.env
        echo "FOD_PARENT_RELEASE=${DEFAULT_APP_NAME}${FOD_APP_NAME_POSTFIX}:${DEFAULT_PARENT_RELEASE_NAME}" >> build.env
    fi
    echo "Created build.env with the following contents:"
    cat build.env
  artifacts:
    reports:
      dotenv: build.env

fortify-sast-scan:                # Needs to match the job name specified above
  stage: scan
  needs: 
    - job: python-test
    - job: fortify-sast-scan-prepare
    - job: env-prepare
      artifacts: true
  before_script: |
    echo "FOD_RELEASE=${FOD_RELEASE}"
    echo "FOD_PARENT_RELEASE=${FOD_PARENT_RELEASE}"
  variables:                      # Specify AST scan configuration like SSC/FoD URL/credentials, tasks to execute, ...
    FOD_URL: ${FOD_URL}           # See https://fortify.github.io/fcli/<fcli-version>/generic-actions.html#_ci for details
    FOD_CLIENT_ID: ${FOD_CLIENT_ID}  
    FOD_CLIENT_SECRET: ${FOD_CLIENT_SECRET}
    #FOD_RELEASE: "${DEFAULT_APP_NAME}${FOD_APP_NAME_POSTFIX}:${DEFAULT_RELEASE_NAME}"
    DO_SETUP: true
    SETUP_EXTRA_OPTS: '--copy-from "${FOD_PARENT_RELEASE}" --use-aviator' # --oss
    PACKAGE_EXTRA_OPTS: '-oss'
    #PACKAGE_EXTRA_OPTS: --python-version 3 --python-virtual-env .ven --python-requirements requirements.txt
    #USE_PACKAGE: myCustomPackage.zip
    DO_RELEASE_SUMMARY: true
    DO_CHECK_POLICY: false       # Set to true to check for policy violations and fail build if any are found
    DO_PR_COMMENT: true
    DO_EXPORT: true
  rules:
    - if: ( $FOD_URL != null || $FOD_URL =~ /^./ )

fortify-sca-scan:
  extends: fcli
  stage: scan
  needs: 
    - job: python-build
    - job: fcli-prepare
    - job: env-prepare
      artifacts: true
    - job: fortify-sast-scan # for creating new FoD release (if required)
  before_script: |
    echo "FOD_RELEASE=${FOD_RELEASE}"
    echo "FOD_PARENT_RELEASE=${FOD_PARENT_RELEASE}"
  script: |
    ${FCLI} tool debricked-cli install
    ${FCLI} tool debricked-cli run resolve
    ${FCLI} fod session login --url $FOD_API_URL --client-id $FOD_CLIENT_ID --client-secret $FOD_CLIENT_SECRET --fod-session gitlab
    rm -f $PACKAGE_FILE
    python -m zipfile -c $PACKAGE_FILE requirements.txt.pip.debricked.lock debricked-config.yaml
    ${FCLI} fod oss-scan start --release "${FOD_RELEASE}" -f $PACKAGE_FILE --store curScan --fod-session gitlab
    sleep 10
    ${FCLI} fod oss-scan wait-for ::curScan:: --fod-session gitlab
    ${FCLI} fod session logout --fod-session gitlab
  variables:
    PACKAGE_FILE: "fortifypackage.zip"
    FOD_API_URL: ${FOD_API_URL}           # Fortify API URL, e.g. https://api.ams.fortify.com
    FOD_CLIENT_ID: ${FOD_CLIENT_ID}  
    FOD_CLIENT_SECRET: ${FOD_CLIENT_SECRET}
    #FOD_RELEASE: "${DEFAULT_APP_NAME}${FOD_APP_NAME_POSTFIX}:${DEFAULT_RELEASE_NAME}"
  rules:
    - if: $CI_PIPELINE_SOURCE == "merge_request_event"
    - if: $CI_COMMIT_BRANCH && $CI_OPEN_MERGE_REQUESTS
      when: never
    - if: $CI_COMMIT_BRANCH

fortify-dast-scan:
  extends: fcli
  stage: scan
  needs: 
    - job: deploy
    - job: fcli-prepare
    - job: env-prepare
      artifacts: true
    #- job: fortify-sast-scan # for creating new FoD release (if required)
  before_script: |
    echo "FOD_RELEASE=${FOD_RELEASE}"
    echo "FOD_PARENT_RELEASE=${FOD_PARENT_RELEASE}"
  script: |
    ${FCLI} fod session login --url $FOD_API_URL --client-id $FOD_CLIENT_ID --client-secret $FOD_CLIENT_SECRET --fod-session gitlab
    # ${FCLI} fod dast-scan start --release "${FOD_RELEASE}" --store curScan --fod-session gitlab
    # ${FCLI} fod dast-scan wait-for ::curScan:: --fod-session gitlab
    ${FCLI} fod action run gitlab-dast-report --release "${FOD_RELEASE}" --fod-session gitlab
    ${FCLI} fod session logout --fod-session gitlab
  variables:
    FOD_API_URL: ${FOD_API_URL}           # Fortify API URL, e.g. https://api.ams.fortify.com
    FOD_CLIENT_ID: ${FOD_CLIENT_ID}  
    FOD_CLIENT_SECRET: ${FOD_CLIENT_SECRET}
    #FOD_RELEASE: "${DEFAULT_APP_NAME}${FOD_APP_NAME_POSTFIX}:${DEFAULT_RELEASE_NAME}"
  artifacts:
    reports:
      dast: gl-fortify-dast.json
    paths: [ gl-fortify-dast.json ]
  rules:
    - if: '$CI_COMMIT_BRANCH == "main"' # only run DAST scan on main branch

fortify-security-gate:
  extends: fcli
  stage: scan
  needs:
    - job: fortify-sca-scan
    - job: fortify-sast-scan
    - job: fortify-dast-scan
      optional: true
    - job: fcli-prepare
    - job: env-prepare
      artifacts: true
  before_script: |
    echo "FOD_RELEASE=${FOD_RELEASE}"
    echo "FOD_PARENT_RELEASE=${FOD_PARENT_RELEASE}"
  script: |
    ${FCLI} fod session login --url $FOD_API_URL --client-id $FOD_CLIENT_ID --client-secret $FOD_CLIENT_SECRET --fod-session gitlab
    ${FCLI} fod action run release-summary --on-unsigned=ignore --release "${FOD_RELEASE}" --fod-session gitlab
    ${FCLI} fod action run etc/actions/gitlab-fod-codequality-report.yml --on-unsigned=ignore --release "${FOD_RELEASE}" -f release-summary.md --fod-session gitlab
    ${FCLI} fod action run etc/actions/custom-fod-check-policy.yml --on-unsigned=ignore --release "${FOD_RELEASE}" --fod-session gitlab
    ${FCLI} fod session logout --fod-session gitlab
  variables:
    FOD_URL: ${FOD_URL}
    FOD_API_URL: ${FOD_API_URL}
    FOD_CLIENT_ID: ${FOD_CLIENT_ID}  
    FOD_CLIENT_SECRET: ${FOD_CLIENT_SECRET}
  artifacts:
      reports:
        codequality:  'gl-fortify-codequality.json'
      expose_as: 'Release Summary'
      paths: [ 'release-summary.md' ]
  rules:
    - if: $CI_PIPELINE_SOURCE == "merge_request_event"
    - if: $CI_COMMIT_BRANCH && $CI_OPEN_MERGE_REQUESTS
      when: never
    - if: $CI_COMMIT_BRANCH
    # when: always
  allow_failure: true